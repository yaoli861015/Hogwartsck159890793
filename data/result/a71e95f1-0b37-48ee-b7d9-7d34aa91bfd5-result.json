{
  "name": "test_steps_demo[allure]",
  "status": "broken",
  "statusDetails": {
    "message": "selenium.common.exceptions.InvalidArgumentException: Message: invalid argument\n  (Session info: chrome=98.0.4758.102)\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x00AFA0A3+2597027]\n\tOrdinal0 [0x00A8BA61+2144865]\n\tOrdinal0 [0x00983B20+1063712]\n\tOrdinal0 [0x00975CF3+1006835]\n\tOrdinal0 [0x00974ABA+1002170]\n\tOrdinal0 [0x00974B96+1002390]\n\tOrdinal0 [0x0098534A+1069898]\n\tOrdinal0 [0x009D90CD+1413325]\n\tOrdinal0 [0x009C87AC+1345452]\n\tOrdinal0 [0x009D8B1A+1411866]\n\tOrdinal0 [0x009C85C6+1344966]\n\tOrdinal0 [0x009A54C6+1201350]\n\tOrdinal0 [0x009A63B6+1205174]\n\tGetHandleVerifier [0x00CA10A2+1681842]\n\tGetHandleVerifier [0x00D53B0C+2413596]\n\tGetHandleVerifier [0x00B91221+568113]\n\tGetHandleVerifier [0x00B8FFA3+563379]\n\tOrdinal0 [0x00A9174E+2168654]\n\tOrdinal0 [0x00A96538+2188600]\n\tOrdinal0 [0x00A96680+2188928]\n\tOrdinal0 [0x00AA030C+2229004]\n\tBaseThreadInitThunk [0x75F66739+25]\n\tRtlGetFullPathName_UEx [0x77048E7F+1215]\n\tRtlGetFullPathName_UEx [0x77048E4D+1165]",
    "trace": "test_data1 = 'allure'\n\n    @allure.testcase('http:www.github.com')\n    @allure.feature('百度搜索')\n    @pytest.mark.parametrize('test_data1', datas)\n    def test_steps_demo(test_data1):\n        with allure.step('百度搜索'):\n            driver = webdriver.Chrome()\n>           driver.get('www.baidu.com')\n\ntest_baidudemo.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\..\\python370\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:436: in get\n    self.execute(Command.GET, {'url': url})\n..\\..\\..\\..\\python370\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:424: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001F7742C3DC8>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid argument\\\\n  (Session info: chrome=9...unk [0x75F66739+25]\\\\n\\\\tRtlGetFullPathName_UEx [0x77048E7F+1215]\\\\n\\\\tRtlGetFullPathName_UEx [0x77048E4D+1165]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument\nE         (Session info: chrome=98.0.4758.102)\nE       Stacktrace:\nE       Backtrace:\nE       \tOrdinal0 [0x00AFA0A3+2597027]\nE       \tOrdinal0 [0x00A8BA61+2144865]\nE       \tOrdinal0 [0x00983B20+1063712]\nE       \tOrdinal0 [0x00975CF3+1006835]\nE       \tOrdinal0 [0x00974ABA+1002170]\nE       \tOrdinal0 [0x00974B96+1002390]\nE       \tOrdinal0 [0x0098534A+1069898]\nE       \tOrdinal0 [0x009D90CD+1413325]\nE       \tOrdinal0 [0x009C87AC+1345452]\nE       \tOrdinal0 [0x009D8B1A+1411866]\nE       \tOrdinal0 [0x009C85C6+1344966]\nE       \tOrdinal0 [0x009A54C6+1201350]\nE       \tOrdinal0 [0x009A63B6+1205174]\nE       \tGetHandleVerifier [0x00CA10A2+1681842]\nE       \tGetHandleVerifier [0x00D53B0C+2413596]\nE       \tGetHandleVerifier [0x00B91221+568113]\nE       \tGetHandleVerifier [0x00B8FFA3+563379]\nE       \tOrdinal0 [0x00A9174E+2168654]\nE       \tOrdinal0 [0x00A96538+2188600]\nE       \tOrdinal0 [0x00A96680+2188928]\nE       \tOrdinal0 [0x00AA030C+2229004]\nE       \tBaseThreadInitThunk [0x75F66739+25]\nE       \tRtlGetFullPathName_UEx [0x77048E7F+1215]\nE       \tRtlGetFullPathName_UEx [0x77048E4D+1165]\n\n..\\..\\..\\..\\python370\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:247: InvalidArgumentException"
  },
  "steps": [
    {
      "name": "百度搜索",
      "status": "broken",
      "statusDetails": {
        "message": "selenium.common.exceptions.InvalidArgumentException: Message: invalid argument\n  (Session info: chrome=98.0.4758.102)\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x00AFA0A3+2597027]\n\tOrdinal0 [0x00A8BA61+2144865]\n\tOrdinal0 [0x00983B20+1063712]\n\tOrdinal0 [0x00975CF3+1006835]\n\tOrdinal0 [0x00974ABA+1002170]\n\tOrdinal0 [0x00974B96+1002390]\n\tOrdinal0 [0x0098534A+1069898]\n\tOrdinal0 [0x009D90CD+1413325]\n\tOrdinal0 [0x009C87AC+1345452]\n\tOrdinal0 [0x009D8B1A+1411866]\n\tOrdinal0 [0x009C85C6+1344966]\n\tOrdinal0 [0x009A54C6+1201350]\n\tOrdinal0 [0x009A63B6+1205174]\n\tGetHandleVerifier [0x00CA10A2+1681842]\n\tGetHandleVerifier [0x00D53B0C+2413596]\n\tGetHandleVerifier [0x00B91221+568113]\n\tGetHandleVerifier [0x00B8FFA3+563379]\n\tOrdinal0 [0x00A9174E+2168654]\n\tOrdinal0 [0x00A96538+2188600]\n\tOrdinal0 [0x00A96680+2188928]\n\tOrdinal0 [0x00AA030C+2229004]\n\tBaseThreadInitThunk [0x75F66739+25]\n\tRtlGetFullPathName_UEx [0x77048E7F+1215]\n\tRtlGetFullPathName_UEx [0x77048E4D+1165]\n\n",
        "trace": "  File \"D:\\Ksoftware\\pycharm\\pycharm\\ck159890793\\data\\test_baidudemo.py\", line 21, in test_steps_demo\n    driver.get('www.baidu.com')\n  File \"d:\\ksoftware\\python370\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 436, in get\n    self.execute(Command.GET, {'url': url})\n  File \"d:\\ksoftware\\python370\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 424, in execute\n    self.error_handler.check_response(response)\n  File \"d:\\ksoftware\\python370\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 247, in check_response\n    raise exception_class(message, screen, stacktrace)\n"
      },
      "start": 1645021415003,
      "stop": 1645021416180
    }
  ],
  "parameters": [
    {
      "name": "test_data1",
      "value": "'allure'"
    }
  ],
  "start": 1645021415003,
  "stop": 1645021416180,
  "uuid": "d29602f9-8a18-423c-aa65-ae6e54119e56",
  "historyId": "77446bc5c35b2e2394141393a0922721",
  "testCaseId": "c1bd71ed6b29aa553aa5af4cbca54344",
  "fullName": "test_baidudemo#test_steps_demo",
  "labels": [
    {
      "name": "feature",
      "value": "百度搜索"
    },
    {
      "name": "suite",
      "value": "test_baidudemo"
    },
    {
      "name": "host",
      "value": "小姚"
    },
    {
      "name": "thread",
      "value": "4140-MainThread"
    },
    {
      "name": "framework",
      "value": "pytest"
    },
    {
      "name": "language",
      "value": "cpython3"
    },
    {
      "name": "package",
      "value": "test_baidudemo"
    }
  ],
  "links": [
    {
      "type": "test_case",
      "url": "http:www.github.com",
      "name": "http:www.github.com"
    }
  ]
}